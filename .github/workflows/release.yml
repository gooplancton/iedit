name: Publish release on master

on:
  push:
    branches: [master]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo registry and git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Build (release)
        run: cargo build --workspace --release --locked

      - name: Run tests
        run: cargo test --workspace --verbose

      - name: Show built artifacts (debug)
        run: ls -la target/release || true

      - name: Upload built binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: iedit
          path: target/release/iedit*

      - name: Prepare release tag (read from iedit_core/Cargo.toml)
        id: tag
        run: |
          set -e
          CARGO_TOML="iedit_core/Cargo.toml"
          if [ -f "$CARGO_TOML" ]; then
            ver=$(sed -n 's/^[[:space:]]*version[[:space:]]*=[[:space:]]*"\(.*\)"/\1/p' "$CARGO_TOML" | head -n1)
          else
            ver=""
          fi
          if [ -z "$ver" ]; then
            echo "No version found in $CARGO_TOML; defaulting to 0.0.0" >&2
            ver="0.0.0"
          fi
          if [[ "$ver" == v* ]]; then TAG="$ver"; else TAG="v$ver"; fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Prepared tag: $TAG"

      - name: Create GitHub release and upload binary
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          artifact: target/release/iedit
          token: ${{ secrets.PAT }}
